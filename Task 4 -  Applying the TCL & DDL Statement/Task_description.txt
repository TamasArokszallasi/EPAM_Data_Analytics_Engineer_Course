Task 1

Choose your top-3 favorite movies and add them to the 'film' table. Fill in rental rates with 4.99, 9.99 and 19.99 and rental durations with 1, 2 and 3 weeks respectively.
Add the actors who play leading roles in your favorite movies to the 'actor' and 'film_actor' tables (6 or more actors in total).
Add your favorite movies to any store's inventory.
Alter any existing customer in the database with at least 43 rental and 43 payment records. Change their personal data to yours (first name, last name, address, etc.). You can use any existing address from the "address" table. Please do not perform any updates on the "address" table, as this can impact multiple records with the same address.
Remove any records related to you (as a customer) from all tables except 'Customer' and 'Inventory'
Rent you favorite movies from the store they are in and pay for them (add corresponding records to the database to represent this activity)
(Note: to insert the payment_date into the table payment, you can create a new partition (see the scripts to install the training database ) or add records for the
first half of 2017)

Note: 
All new & updated records must have 'last_update' field set to current_date.
Double-check your DELETEs and UPDATEs with SELECT query before committing the transaction!!! 
Your scripts must be rerunnable/reusable and don't produces duplicates. You can use WHERE NOT EXISTS, IF NOT EXISTS, ON CONFLICT DO NOTHING, etc.
Don't hardcode IDs. Instead of construction INSERT INTO … VALUES use INSERT INTO … SELECT …
Please add comments why you chose a particular way to solve each tasks.



Task 2

Note: 
Make sure to turn autocommit on in connection settings before attempting the following tasks. Otherwise you might get an error at some
point.


1. Create table ‘table_to_delete’ and fill it with the following query:

               CREATE TABLE table_to_delete AS
               SELECT 'veeeeeeery_long_string' || x AS col
               FROM generate_series(1,(10^7)::int) x; -- generate_series() creates 10^7 rows of sequential numbers from 1 to 10000000 (10^7)


2. Lookup how much space this table consumes with the following query:


               SELECT *, pg_size_pretty(total_bytes) AS total,
                                    pg_size_pretty(index_bytes) AS INDEX,
                                    pg_size_pretty(toast_bytes) AS toast,
                                    pg_size_pretty(table_bytes) AS TABLE
               FROM ( SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes
                               FROM (SELECT c.oid,nspname AS table_schema,
                                                               relname AS TABLE_NAME,
                                                              c.reltuples AS row_estimate,
                                                              pg_total_relation_size(c.oid) AS total_bytes,
                                                              pg_indexes_size(c.oid) AS index_bytes,
                                                              pg_total_relation_size(reltoastrelid) AS toast_bytes
                                              FROM pg_class c
                                              LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
                                              WHERE relkind = 'r'
                                              ) a
                                    ) a
               WHERE table_name LIKE '%table_to_delete%';


3. Issue the following DELETE operation on ‘table_to_delete’:

               DELETE FROM table_to_delete
               WHERE REPLACE(col, 'veeeeeeery_long_string','')::int % 3 = 0; -- removes 1/3 of all rows


      a) Note how much time it takes to perform this DELETE statement;
      b) Lookup how much space this table consumes after previous DELETE;
      c) Perform the following command (if you're using DBeaver, press Ctrl+Shift+O to observe server output (VACUUM results)): 
               VACUUM FULL VERBOSE table_to_delete;
      d) Check space consumption of the table once again and make conclusions;
      e) Recreate ‘table_to_delete’ table;


4. Issue the following TRUNCATE operation:

               TRUNCATE table_to_delete;
      a) Note how much time it takes to perform this TRUNCATE statement.
      b) Compare with previous results and make conclusion.
      c) Check space consumption of the table once again and make conclusions;


5. Hand over your investigation's results to your trainer. The results must include:

      a) Space consumption of ‘table_to_delete’ table before and after each operation;
      b) Duration of each operation (DELETE, TRUNCATE)
