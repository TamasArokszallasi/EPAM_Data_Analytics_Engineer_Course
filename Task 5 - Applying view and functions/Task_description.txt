Create a view, query language functions, and procedure language functions using a DVD rental database.
Note:
Please pay attention that your code must be reusable and rerunnable and executes without errors.
Don't hardcode IDs
Add RAISE EXCEPTION to identify errors
Don't forget to check for duplicates, ensure that the object has not already been created
Check that the function is run correctly and returns the desired result. Don't forget about optional parameters

Task 1. Create a view

Create a view called 'sales_revenue_by_category_qtr' that shows the film category and total sales revenue for the current quarter and year. The view should only display categories with at least one sale in the current quarter. 
Note: when the next quarter begins, it will be considered as the current quarter.
Task 2. Create a query language functions

Create a query language function called 'get_sales_revenue_by_category_qtr' that accepts one parameter representing the current quarter and year and returns the same result as the 'sales_revenue_by_category_qtr' view.
Task 3. Create procedure language functions

Create a function that takes a country as an input parameter and returns the most popular film in that specific country. 
The function should format the result set as follows:
                    Query (example):select * from core.most_popular_films_by_countries(array['Afghanistan','Brazil','United States’]);







Task 4. Create procedure language functions

Create a function that generates a list of movies available in stock based on a partial title match (e.g., movies containing the word 'love' in their title). 
The titles of these movies are formatted as '%...%', and if a movie with the specified title is not in stock, return a message indicating that it was not found.
The function should produce the result set in the following format (note: the 'row_num' field is an automatically generated counter field, starting from 1 and incrementing for each entry, e.g., 1, 2, ..., 100, 101, ...).

                    Query (example):select * from core.films_in_stock_by_title('%love%’);







Task 5. Create procedure language functions

Create a procedure language function called 'new_movie' that takes a movie title as a parameter and inserts a new movie with the given title in the film table. The function should generate a new unique film ID, set the rental rate to 4.99, the rental duration to three days, the replacement cost to 19.99. The release year and language are optional and by default should be current year and Klingon respectively. The function should also verify that the language exists in the 'language' table. Then, ensure that no such function has been created before; if so, replace it.
Task 6. Prepare answers to the following questions

What operations do the following functions perform: film_in_stock, film_not_in_stock, inventory_in_stock, get_customer_balance, inventory_held_by_customer, rewards_report, last_day? You can find these functions in dvd_rental database.
Why does ‘rewards_report’ function return 0 rows? Correct and recreate the function, so that it's able to return rows properly.
Is there any function that can potentially be removed from the dvd_rental codebase? If so, which one and why?
* The ‘get_customer_balance’ function describes the business requirements for calculating the client balance. Unfortunately, not all of them are implemented in this function. Try to change function using the requirements from the comments.
* How do ‘group_concat’ and ‘_group_concat’ functions work? (database creation script might help) Where are they used?
* What does ‘last_updated’ function do? Where is it used?
* What is tmpSQL variable for in ‘rewards_report’ function? Can this function be recreated without EXECUTE statement and dynamic SQL? Why?

