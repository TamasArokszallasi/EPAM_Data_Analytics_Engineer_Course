

--Creating database
CREATE DATABASE subway; 
--creating a subway schema
CREATE SCHEMA IF NOT EXISTS Subway;




CREATE TABLE IF NOT EXISTS Subway.Infrastructure (
   InfrastructureID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
   NameOfInfrastructure ENUM('Train', 'Line', 'Station') NOT NULL,
   Status ENUM('Out of operation', 'Under Maintenance', 'Operating') NOT NULL,
   LastMaintenance DATE NOT NULL DEFAULT CURRENT_DATE CHECK (LastMaintenance > '2000-01-01'),
   NextMaintenance DATE NOT NULL DEFAULT (CURRENT_DATE + INTERVAL '1 YEAR')  
);

CREATE TABLE IF NOT EXISTS Subway.TicketType (
    TypeID BIGSERIAL PRIMARY KEY,
    TypeName ENUM('Adult', 'Child', 'Senior', 'Student', 'Disabled') NOT NULL,
    Discount DECIMAL(3,2) CHECK (Discount >= 0) DEFAULT 0.00
);


CREATE TABLE IF NOT EXISTS Subway.Line (
    LineID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LineName VARCHAR(100) NOT NULL DEFAULT 'Unknown' unique,
    OperatingFrequency INT NOT NULL DEFAULT 0 check (OperatingFrequency >=0),
    NumberOfTrains INT NOT null DEFAULT 1 CHECK (NumberOfTrains >= 0) ,
    NumberOfEmployees INT NOT NULL DEFAULT 1 CHECK (NumberOfEmployees >= 0) ,
    InfrastructureID INT NOT NULL,
    FOREIGN KEY (InfrastructureID) REFERENCES Subway.Infrastructure(InfrastructureID)
);

CREATE TABLE IF NOT EXISTS Subway.Employee (
    EmployeeID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    firstName VARCHAR(100) NOT NULL,
    LastName VARCHAR (100) NOT NULL,
    FullName VARCHAR (200) GENERATED ALWAYS AS (firstname || ' ' || LastName) STORED, 
    Position ENUM('Driver', 'Conductor', 'Cashier', 'Engineer') NOT NULL
);

CREATE TABLE IF NOT EXISTS Subway.Station (
    StationID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    StationName VARCHAR(100) NOT NULL UNIQUE, 
    Location VARCHAR(100) NOT NULL UNIQUE, 
    InfrastructureID INT NOT NULL,
    FOREIGN KEY (InfrastructureID) REFERENCES Subway.Infrastructure(InfrastructureID)
);


CREATE TABLE IF NOT EXISTS Subway.Train (
    TrainID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LineID INT NOT NULL,
    InfrastructureID INT NOT NULL,
    FOREIGN KEY (LineID) REFERENCES Subway.Line(LineID),
    FOREIGN KEY (InfrastructureID) REFERENCES Subway.Infrastructure(InfrastructureID)
);

CREATE TABLE IF NOT EXISTS Subway.Route (
    RouteID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LineID INT NOT NULL,
    FOREIGN KEY (LineID) REFERENCES Subway.Line(LineID)
);

CREATE TABLE IF NOT EXISTS Subway.Schedule (
    ScheduleID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LineID INT NOT NULL,
    StationID INT NOT NULL,
    ArrivalTime TIME NOT NULL DEFAULT CURRENT_TIME,
    DepartureTime TIME NOT NULL DEFAULT CURRENT_TIME,
    Duration TIME GENERATED ALWAYS AS (DepartureTime - ArrivalTime) STORED,
    FOREIGN KEY (LineID) REFERENCES Subway.Line(LineID),
    FOREIGN KEY (StationID) REFERENCES Subway.Station(StationID)
);

CREATE TABLE IF NOT EXISTS Subway.Ticket (
    TicketID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TypeID INT NOT NULL,
    Price DECIMAL(5,2) NOT NULL CHECK (Price >= 0) DEFAULT 0.00,
    FOREIGN KEY (TypeID) REFERENCES Subway.TicketType(TypeID)
);


CREATE TABLE IF NOT EXISTS Subway.RouteSchedule (
    RouteID INT NOT NULL,
    ScheduleID INT NOT NULL,
    PRIMARY KEY (RouteID, ScheduleID),
    FOREIGN KEY (RouteID) REFERENCES Subway.Route(RouteID),
    FOREIGN KEY (ScheduleID) REFERENCES Subway.Schedule(ScheduleID)
);

CREATE TABLE IF NOT EXISTS Subway.TicketSale (
    TicketID INT NOT NULL,
    ScheduleID INT NOT NULL,
    SaleDate DATE NOT NULL DEFAULT CURRENT_DATE CHECK (SaleDate > '2000-01-01'),
    PRIMARY KEY (TicketID, ScheduleID),
    FOREIGN KEY (TicketID) REFERENCES Subway.Ticket(TicketID),
    FOREIGN KEY (ScheduleID) REFERENCES Subway.Schedule(ScheduleID)
);

CREATE TABLE IF NOT EXISTS Subway.StationRoute (
    RouteID INT NOT NULL,
    StationID INT NOT NULL,
    PRIMARY KEY (RouteID, StationID),
    FOREIGN KEY (RouteID) REFERENCES Subway.Route(RouteID),
    FOREIGN KEY (StationID) REFERENCES Subway.Station(StationID)
);

CREATE TABLE IF NOT EXISTS Subway.TrainRoute (
    RouteID INT NOT NULL,
    TrainID INT NOT NULL,
    PRIMARY KEY (RouteID, TrainID),
    FOREIGN KEY (RouteID) REFERENCES Subway.Route(RouteID),
    FOREIGN KEY (TrainID) REFERENCES Subway.Train(TrainID)
);

CREATE TABLE IF NOT EXISTS Subway.EmployeeLine (
    EmployeeID INT NOT NULL,
    LineID INT NOT NULL,
    PRIMARY KEY (EmployeeID, LineID),
    FOREIGN KEY (EmployeeID) REFERENCES Subway.Employee(EmployeeID),
    FOREIGN KEY (LineID) REFERENCES Subway.Line(LineID)
);

CREATE TABLE IF NOT EXISTS Subway.StationEmployee (
    EmployeeID INT NOT NULL,
    StationID INT NOT NULL,
    PRIMARY KEY (EmployeeID, StationID),
    FOREIGN KEY (EmployeeID) REFERENCES Subway.Employee(EmployeeID),
    FOREIGN KEY (StationID) REFERENCES Subway.Line(LineID)
);


-- Populate Infrastructure table
-- Insert a new rental record, i choose Mike Hillyer randomly as the staff.
INSERT INTO Subway.Infrastructure (NameOfInfrastructure, Status, LastMaintenance, NextMaintenance)
SELECT * FROM (VALUES 
    ('Train', 'Operating', '2024-01-01'::DATE, '2025-01-02'::DATE),--here ::DATE is to convert string to date to be comparable in the later part
    ('Line', 'Under Maintenance', '2024-02-01'::DATE, '2025-02-02'::DATE),
    ('Station', 'Operating', '2024-02-01'::DATE, '2025-02-02'::DATE),
    ('Line', 'Operating', '2024-02-01'::DATE, '2025-02-02'::DATE)
) AS tmp (NameOfInfrastructure, Status, LastMaintenance, NextMaintenance)
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Infrastructure 
    WHERE NameOfInfrastructure = tmp.NameOfInfrastructure 
    AND Status = tmp.Status 
    AND LastMaintenance = tmp.LastMaintenance 
    AND NextMaintenance = tmp.NextMaintenance
);


-- Populate TicketType table
INSERT INTO Subway.TicketType (TypeName, Discount)
SELECT tmp.TypeName, tmp.Discount
FROM (
    VALUES 
        ('Adult', 0.00),
        ('Child', 0.90),
        ('Senior', 0.50),
        ('Student', 0.50),
        ('Disabled', 0.90)
) AS tmp (TypeName, Discount)
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.TicketType 
    WHERE TypeName = tmp.TypeName
);


-- Populate Line table
INSERT INTO Subway.Line (LineName, OperatingFrequency, NumberOfTrains, NumberOfEmployees, InfrastructureID)
SELECT tmp.LineName, tmp.OperatingFrequency, tmp.NumberOfTrains, tmp.NumberOfEmployees, tmp.InfrastructureID
FROM (
    SELECT 'M1' AS LineName, 10 AS OperatingFrequency, 2 AS NumberOfTrains, 4 AS NumberOfEmployees, InfrastructureID 
    FROM Subway.infrastructure 
    WHERE NameOfInfrastructure = 'Train'
    UNION ALL
    SELECT 'M2', 8, 3, 6, InfrastructureID 
    FROM Subway.infrastructure 
    WHERE NameOfInfrastructure = 'Train'
    UNION ALL
    SELECT 'M3', 8, 4, 7, InfrastructureID 
    FROM Subway.infrastructure 
    WHERE NameOfInfrastructure = 'Train'
    UNION ALL 
    SELECT 'M4', 8, 5, 9, InfrastructureID 
    FROM Subway.infrastructure 
    WHERE NameOfInfrastructure = 'Train'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Line 
    WHERE LineName = tmp.LineName
);

-- Populate Employee table
INSERT INTO Subway.Employee (firstName, LastName, Position)
SELECT tmp.firstName, tmp.LastName, tmp.Position
FROM (
    VALUES 
        ('John', 'Doe', 'Driver'),
        ('Paul', 'Logan', 'Conductor'),
        ('Michael', 'Johnson', 'Engineer'),
        ('Sean', 'Kingston', 'Conductor')
) AS tmp (firstName, LastName, Position)
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Employee 
    WHERE firstName = tmp.firstName AND LastName = tmp.LastName AND Position = tmp.Position
);

-- Populate Station table
INSERT INTO Subway.Station (StationName, LOCATION, InfrastructureID)
SELECT tmp.StationName, tmp.LOCATION, tmp.InfrastructureID
FROM (
    SELECT 'Puskás stadion' AS StationName, 'Hungária krt. 200' AS LOCATION, InfrastructureID 
    FROM subway.infrastructure 
    WHERE NameOfInfrastructure = 'Station'
    UNION ALL
    SELECT 'Ferenciek tere', 'Kossuth utca 40', InfrastructureID 
    FROM subway.infrastructure 
    WHERE NameOfInfrastructure = 'Station'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Station 
    WHERE StationName = tmp.StationName
);

-- Populate Train table
INSERT INTO Subway.Train (LineID, InfrastructureID)
SELECT tmp.LineID, tmp.InfrastructureID
FROM (
    SELECT line.LineID, infrastructure.InfrastructureID 
    FROM Subway.Line, Subway.Infrastructure 
    WHERE Line.LineName = 'M1' AND infrastructure.NameOfInfrastructure = 'Train'
    UNION ALL
    SELECT line.LineID, infrastructure.InfrastructureID 
    FROM Subway.Line, Subway.Infrastructure 
    WHERE line.LineName = 'M2' AND infrastructure.NameOfInfrastructure = 'Train'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Train 
    WHERE LineID = tmp.LineID AND InfrastructureID = tmp.InfrastructureID
);

-- Populate Route table
INSERT INTO Subway.Route (LineID)
SELECT tmp.LineID
FROM (
    SELECT line.lineid 
    FROM subway.line
    WHERE line.linename = 'M1'
    UNION ALL
    SELECT line.lineid 
    FROM subway.line
    WHERE line.linename = 'M2'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Route 
    WHERE LineID = tmp.LineID
);

-- Populate Schedule table 
INSERT INTO Subway.Schedule (LineID, StationID, ArrivalTime, DepartureTime)   
SELECT tmp.LineID, tmp.StationID, tmp.ArrivalTime, tmp.DepartureTime
FROM (
    SELECT line.lineid, station.stationID, '08:00:00' AS ArrivalTime, '08:30:00' AS DepartureTime
    FROM subway.line, subway.station
    WHERE line.lineID = (SELECT lineid FROM subway.line WHERE lineName = 'M1') 
    AND station.stationID = (SELECT stationID FROM subway.station WHERE stationName = 'Ferenciek Tere')
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Schedule 
    WHERE LineID = tmp.LineID AND StationID = tmp.StationID AND ArrivalTime = tmp.ArrivalTime AND DepartureTime = tmp.DepartureTime
);

-- Populate Ticket table
INSERT INTO Subway.Ticket (price, TypeID)
SELECT tmp.price, tmp.TypeID
FROM (
    SELECT 10.00 AS price, tickettype.TypeID  
    FROM subway.ticketType 
    WHERE tickettype.TypeName = 'adult'
    UNION ALL
    SELECT 5.00, tickettype.TypeID  
    FROM subway.ticketType 
    WHERE ticketType.TypeName = 'Student'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.Ticket 
    WHERE price = tmp.price AND TypeID = tmp.TypeID
);

-- Populate RouteSchedule table
INSERT INTO subway.RouteSchedule (RouteID, ScheduleID)
SELECT tmp.RouteID, tmp.ScheduleID
FROM (
    SELECT r.RouteID, s.ScheduleID
    FROM subway.Route AS r, subway.Schedule AS s, subway.Line AS l
    WHERE r.RouteID = l.LineID AND s.LineID = l.LineID AND l.LineName = 'M1'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.RouteSchedule 
    WHERE RouteID = tmp.RouteID AND ScheduleID = tmp.ScheduleID
);


-- Populate TicketSale table

INSERT INTO Subway.TicketSale (TicketID, ScheduleID, SaleDate)
SELECT tmp.TicketID, tmp.ScheduleID, '2024-03-01'::DATE AS SaleDate
FROM (
    SELECT t.TicketID, s.ScheduleID
    FROM Subway.Ticket AS t, Subway.Schedule AS s
    WHERE t.TypeID = (SELECT TypeID FROM Subway.TicketType WHERE TypeName = 'Student') 
    AND s.ArrivalTime = '08:00:00'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.TicketSale 
    WHERE TicketID = tmp.TicketID AND ScheduleID = tmp.ScheduleID AND SaleDate = '2024-03-01'
);





-- Populate StationRoute table
INSERT INTO Subway.StationRoute (RouteID, StationID)
SELECT tmp.RouteID, tmp.StationID
FROM (
    SELECT route.RouteID, station.StationID 
    FROM Subway.Route AS route, Subway.Station AS station
    WHERE route.LineID = (SELECT LineID FROM Subway.Line WHERE LineName = 'M1') 
    AND station.StationName = 'Ferenciek tere'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.StationRoute 
    WHERE RouteID = tmp.RouteID AND StationID = tmp.StationID
);



-- Populate TrainRoute table
INSERT INTO Subway.TrainRoute (RouteID, TrainID)
SELECT tmp.RouteID, tmp.TrainID
FROM (
    SELECT route.RouteID, train.TrainID 
    FROM Subway.Route AS route, Subway.Train AS train
    WHERE route.LineID = train.LineID
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.TrainRoute 
    WHERE RouteID = tmp.RouteID AND TrainID = tmp.TrainID
);




-- Populate EmployeeLine table
INSERT INTO Subway.EmployeeLine (EmployeeID, LineID)
SELECT tmp.EmployeeID, tmp.LineID
FROM (
    SELECT e.EmployeeID, l.LineID 
    FROM Subway.Employee AS e, Subway.Line AS l
    WHERE e.FullName = 'John Doe' AND l.LineName = 'M1'
) AS tmp
WHERE NOT EXISTS (
    SELECT 1 
    FROM Subway.EmployeeLine 
    WHERE EmployeeID = tmp.EmployeeID AND LineID = tmp.LineID
);




      
ALTER TABLE IF EXISTS Subway.TicketSale
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.RouteSchedule
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.TrainRoute
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.StationRoute
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.EmployeeLine
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.Ticket
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;



ALTER TABLE IF EXISTS Subway.Schedule
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;



ALTER TABLE IF EXISTS Subway.Route
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;



ALTER TABLE IF EXISTS Subway.Train
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;



ALTER TABLE IF EXISTS Subway.Employee
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.Employee
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE IF EXISTS Subway.Line
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


ALTER TABLE Subway.TicketType
ADD COLUMN IF NOT EXISTS record_ts DATE NOT NULL DEFAULT CURRENT_DATE;


SELECT * FROM Subway.employee; -- just a sample check to see if all are good or not
SELECT * FROM Subway.schedule;

